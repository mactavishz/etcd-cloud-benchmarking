// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.2
// source: benchmarkpb/benchmark.proto

package benchmarkpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CTRLMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*CTRLMessage_KeyBatch
	//	*CTRLMessage_KeyBatchResponse
	Payload       isCTRLMessage_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CTRLMessage) Reset() {
	*x = CTRLMessage{}
	mi := &file_benchmarkpb_benchmark_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CTRLMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTRLMessage) ProtoMessage() {}

func (x *CTRLMessage) ProtoReflect() protoreflect.Message {
	mi := &file_benchmarkpb_benchmark_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTRLMessage.ProtoReflect.Descriptor instead.
func (*CTRLMessage) Descriptor() ([]byte, []int) {
	return file_benchmarkpb_benchmark_proto_rawDescGZIP(), []int{0}
}

func (x *CTRLMessage) GetPayload() isCTRLMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *CTRLMessage) GetKeyBatch() *KeyBatch {
	if x != nil {
		if x, ok := x.Payload.(*CTRLMessage_KeyBatch); ok {
			return x.KeyBatch
		}
	}
	return nil
}

func (x *CTRLMessage) GetKeyBatchResponse() *KeyBatchResponse {
	if x != nil {
		if x, ok := x.Payload.(*CTRLMessage_KeyBatchResponse); ok {
			return x.KeyBatchResponse
		}
	}
	return nil
}

type isCTRLMessage_Payload interface {
	isCTRLMessage_Payload()
}

type CTRLMessage_KeyBatch struct {
	KeyBatch *KeyBatch `protobuf:"bytes,1,opt,name=key_batch,json=keyBatch,proto3,oneof"`
}

type CTRLMessage_KeyBatchResponse struct {
	KeyBatchResponse *KeyBatchResponse `protobuf:"bytes,2,opt,name=key_batch_response,json=keyBatchResponse,proto3,oneof"`
}

func (*CTRLMessage_KeyBatch) isCTRLMessage_Payload() {}

func (*CTRLMessage_KeyBatchResponse) isCTRLMessage_Payload() {}

// KeyBatch represents a batch of keys being sent
type KeyBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keys          []string               `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	IsLastBatch   bool                   `protobuf:"varint,2,opt,name=is_last_batch,json=isLastBatch,proto3" json:"is_last_batch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyBatch) Reset() {
	*x = KeyBatch{}
	mi := &file_benchmarkpb_benchmark_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyBatch) ProtoMessage() {}

func (x *KeyBatch) ProtoReflect() protoreflect.Message {
	mi := &file_benchmarkpb_benchmark_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyBatch.ProtoReflect.Descriptor instead.
func (*KeyBatch) Descriptor() ([]byte, []int) {
	return file_benchmarkpb_benchmark_proto_rawDescGZIP(), []int{1}
}

func (x *KeyBatch) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *KeyBatch) GetIsLastBatch() bool {
	if x != nil {
		return x.IsLastBatch
	}
	return false
}

// KeyBatchResponse represents the response after receiving keys
type KeyBatchResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TotalKeysReceived int32                  `protobuf:"varint,1,opt,name=total_keys_received,json=totalKeysReceived,proto3" json:"total_keys_received,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *KeyBatchResponse) Reset() {
	*x = KeyBatchResponse{}
	mi := &file_benchmarkpb_benchmark_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyBatchResponse) ProtoMessage() {}

func (x *KeyBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_benchmarkpb_benchmark_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyBatchResponse.ProtoReflect.Descriptor instead.
func (*KeyBatchResponse) Descriptor() ([]byte, []int) {
	return file_benchmarkpb_benchmark_proto_rawDescGZIP(), []int{2}
}

func (x *KeyBatchResponse) GetTotalKeysReceived() int32 {
	if x != nil {
		return x.TotalKeysReceived
	}
	return 0
}

var File_benchmarkpb_benchmark_proto protoreflect.FileDescriptor

var file_benchmarkpb_benchmark_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x70, 0x62, 0x2f, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x70, 0x62, 0x22, 0x9d, 0x01, 0x0a, 0x0b, 0x43,
	0x54, 0x52, 0x4c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x6b, 0x65,
	0x79, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x4d, 0x0a, 0x12, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6b,
	0x65, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x42, 0x0a, 0x08, 0x4b, 0x65,
	0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0x42,
	0x0a, 0x10, 0x4b, 0x65, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x32, 0x5a, 0x0a, 0x10, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x43, 0x54, 0x52, 0x4c, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x70, 0x62, 0x2e, 0x43, 0x54, 0x52, 0x4c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18,
	0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x70, 0x62, 0x2e, 0x43, 0x54, 0x52,
	0x4c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x15,
	0x5a, 0x13, 0x63, 0x73, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_benchmarkpb_benchmark_proto_rawDescOnce sync.Once
	file_benchmarkpb_benchmark_proto_rawDescData = file_benchmarkpb_benchmark_proto_rawDesc
)

func file_benchmarkpb_benchmark_proto_rawDescGZIP() []byte {
	file_benchmarkpb_benchmark_proto_rawDescOnce.Do(func() {
		file_benchmarkpb_benchmark_proto_rawDescData = protoimpl.X.CompressGZIP(file_benchmarkpb_benchmark_proto_rawDescData)
	})
	return file_benchmarkpb_benchmark_proto_rawDescData
}

var file_benchmarkpb_benchmark_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_benchmarkpb_benchmark_proto_goTypes = []any{
	(*CTRLMessage)(nil),      // 0: benchmarkpb.CTRLMessage
	(*KeyBatch)(nil),         // 1: benchmarkpb.KeyBatch
	(*KeyBatchResponse)(nil), // 2: benchmarkpb.KeyBatchResponse
}
var file_benchmarkpb_benchmark_proto_depIdxs = []int32{
	1, // 0: benchmarkpb.CTRLMessage.key_batch:type_name -> benchmarkpb.KeyBatch
	2, // 1: benchmarkpb.CTRLMessage.key_batch_response:type_name -> benchmarkpb.KeyBatchResponse
	0, // 2: benchmarkpb.BenchmarkService.CTRLStream:input_type -> benchmarkpb.CTRLMessage
	0, // 3: benchmarkpb.BenchmarkService.CTRLStream:output_type -> benchmarkpb.CTRLMessage
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_benchmarkpb_benchmark_proto_init() }
func file_benchmarkpb_benchmark_proto_init() {
	if File_benchmarkpb_benchmark_proto != nil {
		return
	}
	file_benchmarkpb_benchmark_proto_msgTypes[0].OneofWrappers = []any{
		(*CTRLMessage_KeyBatch)(nil),
		(*CTRLMessage_KeyBatchResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_benchmarkpb_benchmark_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_benchmarkpb_benchmark_proto_goTypes,
		DependencyIndexes: file_benchmarkpb_benchmark_proto_depIdxs,
		MessageInfos:      file_benchmarkpb_benchmark_proto_msgTypes,
	}.Build()
	File_benchmarkpb_benchmark_proto = out.File
	file_benchmarkpb_benchmark_proto_rawDesc = nil
	file_benchmarkpb_benchmark_proto_goTypes = nil
	file_benchmarkpb_benchmark_proto_depIdxs = nil
}
